/**********************************************************
 *
 * control.c - Sets the duty cycles for the PWM signals for
 * the main and tail rotors of the helicopter.  Duty cycles
 * calculated using PID control.  Keeps track of the status
 * of the helicopter (landed, landing, taking-off, flying).
 *
 * Authors: Annabelle Ritchie, Karan Naidu, Emily Tideswell
 * Group 13, Thursday PM lab
 **********************************************************/
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/adc.h"
#include "driverlib/timer.h"
#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/debug.h"
#include "utils/ustdlib.h"
#include "circBufT.h"
#include "OrbitOLED/OrbitOLEDInterface.h"
#include "buttons4.h"
#include "display.h"
#include "altitude.h"
#include "yaw.h"
#include "kernel.h"
#include "control.h"
#include "pwmGen.h"
#include "uart.h"

/**********************************************************
 * Constants
 **********************************************************/

int currentAltitude;
int currentYaw;

int desiredAltitude;
int desiredYaw;

int turningToReference;
int landing;
int landed;
int flying;
int takingoff;
int finishedSortie;

static double integratedErrorAltitude;
static double integratedErrorYaw;

static double errorPreviousYaw;
static double errorPreviousAltitude;

uint32_t prevTimer = 0;
uint32_t currentTimer;

#define ALTITUDE_KP 0.8
#define ALTITUDE_KI 0.01
#define ALTITUDE_KD 0.001

#define YAW_KP 0.2
#define YAW_KI 0.0001
#define YAW_KD 0.01

float timeStep;
float integratedError;

enum status
{
    TURNING_TO_REFERENCE,
    LANDING,
    LANDED,
    FLYING,
    TAKING_OFF,
    FINISHED_SORTIE
};

/*********************************************************
 * initialiseTimer
 * Initialises the timer that in the PID controller
 *********************************************************/
void initializeTimer (void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER2);
    TimerDisable(TIMER2_BASE, TIMER_BOTH);
    TimerConfigure(TIMER2_BASE, TIMER_CFG_A_PERIODIC);
    TimerControlEvent(TIMER2_BASE, TIMER_A, TIMER_EVENT_POS_EDGE);
    TimerEnable(TIMER2_BASE, TIMER_A);
}

/*********************************************************
 * integralControlUpdate
 * Returns the integral part of the PID controller output
 * for altitude if altitude parameter is true.  Otherwise
 * returns the integral part of the controller output for
 * yaw.
 *********************************************************/
double integralControlUpdate (double error, double delta_t, int altitude)
{
    if (altitude)
    {
        //For altitude
        integratedErrorAltitude += error * delta_t;
        return integratedErrorAltitude;
    }
    // For yaw
    integratedErrorYaw += error * delta_t;
    return integratedErrorYaw;
}

/*********************************************************
 * derivativeControlUpdate
 * Returns the derivative part of the PID controller
 * output for altitude if altitude parameter is true.
 * Otherwise returns the derivative part of the controller
 * output for yaw.
 *********************************************************/
double derivativeControlUpdate (double error, double delta_t, int altitude)
{
    if (altitude)
    {
        // For altitude
        double error_derivative = (error - errorPreviousAltitude) / delta_t;
        errorPreviousAltitude = error;
        return error_derivative;
    }
    // For yaw
    double error_derivative = (error - errorPreviousYaw) / delta_t;
    errorPreviousYaw = error;
    return error_derivative;
}

/*********************************************************
 * controlAltitude
 * Sets the duty cycle for the main PWM which controls the
 * altitude of the helicopter.  Duty cycle is calculated
 * using PID control.  Also transmits the duty cycle using
 * UART.
 *********************************************************/
void controlAltitude (void)
{
    // Calculate components of PID control
    int error = desiredAltitude - meanAlt;
    float proportionalControl = ALTITUDE_KP * error;
    currentTimer = TimerValueGet(TIMER2_BASE, TIMER_A);

    float deltaTime = (prevTimer - currentTimer)/1332000;
    float integralControl = ALTITUDE_KI * integralControlUpdate(error, deltaTime, 1);
    float derivativeControl = ALTITUDE_KD * derivativeControlUpdate (error, deltaTime, 1);

    prevTimer = TimerValueGet(TIMER2_BASE, TIMER_A);

    float totalControl = proportionalControl + integralControl + derivativeControl;
    // run control algorithm for currentAltitude

    // Set duty cycle
    int dutyCycle = (int) totalControl;
    dutyCycle = 30 + dutyCycle;
    if (dutyCycle < 0)
    {
        dutyCycle = 0;
    }
    setPWM(200, dutyCycle);

    // Transmit duty cycle
    char string[30];
    usnprintf (string, sizeof(string), "Main Cycle = %4d%% \r\n", dutyCycle);
    UARTSend(string);
}

/*********************************************************
 * getYawError
 * Returns the difference between the desired yaw and
 * actual yaw.  Returned value is negative if the
 * helicopter has to turn CCW to reach the desired yaw,
 * and positive if it has to turn CW.
 *********************************************************/
int getYawError (int desired, int yaw)
{
    int oppYaw = (desired + 180) % 360;
    int error;

    if (desired < 180)
    {
        if (yaw > desired && yaw < oppYaw)
        {
            // CCW
            // error should be negative
            error = -(yaw - desired);
        }
        else
        {
            // CW
            // positive
            if (yaw < desired)
            {
                error = desired - yaw;
            }
            else
            {
                error = (360 - yaw) + desired;
            }
        }
    }
    else
    {
        if (yaw > oppYaw && yaw < desired)
        {
            // CW
            error = desired - yaw;
        }
        else
        {
            // CCW
            if (yaw < oppYaw)
            {
                error = -(yaw + (360 - desired));
            }
            else
            {
                error = -(yaw - desired);
            }
        }
    }
    return error;
}

/*********************************************************
 * controlYaw
 * Sets the duty cycle for the tail PWM which controls the
 * yaw of the helicopter.  Duty cycle is calculated
 * using PID control.  Also transmits the duty cycle using
 * UART.
 *********************************************************/
void controlYaw (void)
{
    // run control algorithm for currentYaw
    int error = getYawError(desiredYaw, getYaw());

    float proportionalControl = YAW_KP * error;
    currentTimer = TimerValueGet(TIMER2_BASE, TIMER_A);

    float deltaTime = (prevTimer - currentTimer)/1021580;
    float integralControl = YAW_KI * integralControlUpdate(error, deltaTime, 0);
    float derivativeControl = YAW_KD * derivativeControlUpdate (error, deltaTime, 0);

    prevTimer = TimerValueGet(TIMER2_BASE, TIMER_A);

    float totalControl = proportionalControl + integralControl + derivativeControl;

    // Set duty cycle
    int dutyCycle = (int) totalControl + 20;
    if (error > 0)
    {
        setPWMTail(200, dutyCycle);
        char string[30];
        // Transmit duty cycle
        usnprintf (string, sizeof(string), "Tail Cycle = %4d%% \r\n", dutyCycle);
        UARTSend(string);
    }
}

/*********************************************************
 * flyingFSM
 * Keeps track of the state of the helicopter.  Possible
 * states are landing, landed, taking-off, flying.
 *********************************************************/
void flyingFSM (int modeButton)
{
    // first, check to see if we have finished taking off or landing
    if (meanAlt > 7 && takingoff && finishedSortie)
    {
        takingoff = 0;
        flying = 1;
    }
    else if (meanAlt < 3 && landing)
    {
        landing = 0;
        landed = 1;
    }

    // If the helicopter is not already taking-off or landing, the switch on the TIVA board can be used to set the status
    switch (modeButton)
    {
    case PUSHED:
        if (!takingoff && !landing)
        {
            landed = 0;
            landing = 0;
            takingoff = 1;
            flying = 0;
            desiredAltitude = 10;
            finishedSortie = 0;
        }
        break;
    case RELEASED:
        if (!takingoff && !landing)
        {
            landed = 0;
            landing = 1;
            takingoff = 0;
            flying = 0;
            desiredAltitude = 0;
        }
    }
}

/*********************************************************
 * sortie
 * Rotates the helicopter to the reference yaw before
 * taking off.
 *********************************************************/
void sortie (void)
{
    if (getYawRef() == 0) // Not at yaw reference
    {
        setPWMTail(200, 30);
    }
    else // At yaw reference
    {
        setPWMTail(200, 0);
        finishedSortie = 1;
    }
}

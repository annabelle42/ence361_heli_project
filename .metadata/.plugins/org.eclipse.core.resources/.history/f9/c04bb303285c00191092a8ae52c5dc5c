/*********************************************************
//
// milestone2.c - Milestone 2 for ENCE361 Helicopter project, samples both yaw and altitude of helicopter mount
//
// Authors: Annabelle Ritchie, Karan Naidu, Emily Tideswell
// Group 13, Thursday PM lab
// Contributions:  P.J. Bones	UCECE -- provided base code
**********************************************************/

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/adc.h"
#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/debug.h"
#include "utils/ustdlib.h"
#include "circBufT.h"
#include "OrbitOLED/OrbitOLEDInterface.h"
#include "buttons4.h"
#include "yaw.h"
#include "altitude.h"

//*****************************************************************************
// Constants
//*****************************************************************************
#define SAMPLE_RATE_HZ 10

//*****************************************************************************
// Global variables
//*****************************************************************************
static uint32_t g_ulSampCnt;	// Counter for the interrupts


//*****************************************************************************
// Initialisation functions for the clock (incl. SysTick), ADC, display
//*****************************************************************************
void
initClock (void)
{
    // Set the clock rate to 20 MHz
    SysCtlClockSet (SYSCTL_SYSDIV_10 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN |
                   SYSCTL_XTAL_16MHZ);
    //
    // Set up the period for the SysTick timer.  The SysTick timer period is
    // set as a function of the system clock.
    SysTickPeriodSet(SysCtlClockGet() / SAMPLE_RATE_HZ);
    //
    // Register the interrupt handler
    SysTickIntRegister(SysTickIntHandler);
    //
    // Enable interrupt and device
    SysTickIntEnable();
    SysTickEnable();
}




int
main(void)
{
	uint16_t i;
	int sum;
	int32_t ref;
	int32_t meanAlt;
	int32_t meanYaw;
	uint8_t leftButState;
	
	initClock ();
	initDisplay ();
	initButtons ();

	initCircBuf (&g_yawBuffer, BUF_SIZE_YAW);

    //
    // Enable interrupts to the processor.
    IntMasterEnable();

    SysCtlDelay (SysCtlClockGet() / 6);  // Update display at ~ 2 Hz


	while (1)
	{
	    updateButtons ();       // Poll the buttons
	    leftButState = checkButton (LEFT);
	    if (leftButState == PUSHED)
	    {
	        ref = getReferenceAltitude();
	    }
	    else
	    {

            //
            // Background task: calculate the (approximate) mean of the values in the
            // circular buffer and display it, together with the sample number.
            sum = 0;
            for (i = 0; i < BUF_SIZE_ALT; i++)
            {
                sum = sum + readCircBuf (&g_altBuffer);
            }
            // Calculate and display the rounded mean of the buffer contents
            meanAlt = ((((2 * sum + BUF_SIZE_ALT) / 2 / BUF_SIZE_ALT)));

            sum = 0;
            for (i = 0; i < BUF_SIZE_YAW; i++)
            {
                int current_value = readCircBuf (&g_yawBuffer);
                sum = sum + readCircBuf (&g_yawBuffer);
                printf("%d\n", current_value);
            }
            // Calculate and display the rounded mean of the buffer contents
            meanYaw = ((((2 * sum + BUF_SIZE_YAW) / 2 / BUF_SIZE_YAW)));

            displayAltYaw (meanAlt, meanYaw, g_ulSampCnt, ref);
	    }
        SysCtlDelay (SysCtlClockGet() / 150);  // Update display at ~ 50 Hz

	}
}


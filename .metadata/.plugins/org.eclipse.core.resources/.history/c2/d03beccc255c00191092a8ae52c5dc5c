/*********************************************************
//
// milestone2.c - Milestone 2 for ENCE361 Helicopter project, samples both yaw and altitude of helicopter mount
//
// Authors: Annabelle Ritchie, Karan Naidu, Emily Tideswell
// Group 13, Thursday PM lab
// Contributions:  P.J. Bones	UCECE -- provided base code
**********************************************************/

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/adc.h"
#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/debug.h"
#include "utils/ustdlib.h"
#include "circBufT.h"
#include "OrbitOLED/OrbitOLEDInterface.h"
#include "buttons4.h"

//*****************************************************************************
// Constants
//*****************************************************************************
#define BUF_SIZE_ALT 1
#define BUF_SIZE_YAW 1
#define SAMPLE_RATE_HZ 10

//*****************************************************************************
// Global variables
//*****************************************************************************
static circBuf_t g_altBuffer;		// Buffer of size BUF_SIZE integers (sample values)
static circBuf_t g_yawBuffer;
static uint32_t g_ulSampCnt;	// Counter for the interrupts

//*****************************************************************************
//
// The interrupt handler for the for SysTick interrupt.
//
//*****************************************************************************
void
SysTickIntHandler(void)
{
    //
    // Initiate a conversion
    //
    ADCProcessorTrigger(ADC0_BASE, 3); 
    ADCProcessorTrigger(ADC1_BASE, 3);
    g_ulSampCnt++;
}

//*****************************************************************************
//
// The handler for the ADC conversion complete interrupt.
// Writes to the circular buffer.
//
//*****************************************************************************
void
ADCIntHandlerAlt(void)
{
	uint32_t altValue;
	
	//
	// Get the single sample from ADC0.  ADC_BASE is defined in
	// inc/hw_memmap.h
	ADCSequenceDataGet(ADC0_BASE, 3, &altValue);
	//
	// Place it in the circular buffer (advancing write index)
	writeCircBuf (&g_altBuffer, altValue);
	//
	// Clean up, clearing the interrupt
	ADCIntClear(ADC0_BASE, 3);
}

//*****************************************************************************
//
// The handler for the ADC conversion complete interrupt.
// Writes to the circular buffer.
//
//*****************************************************************************
void
ADCIntHandlerYaw(void)
{
    uint32_t yawValue;

    //
    // Get the single sample from ADC0.  ADC_BASE is defined in
    // inc/hw_memmap.h
    ADCSequenceDataGet(ADC1_BASE, 3, &yawValue);
    //
    // Place it in the circular buffer (advancing write index)
    writeCircBuf (&g_yawBuffer, yawValue);
    //
    // Clean up, clearing the interrupt
    ADCIntClear(ADC1_BASE, 3);
}



//*****************************************************************************
// Initialisation functions for the clock (incl. SysTick), ADC, display
//*****************************************************************************
void
initClock (void)
{
    // Set the clock rate to 20 MHz
    SysCtlClockSet (SYSCTL_SYSDIV_10 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN |
                   SYSCTL_XTAL_16MHZ);
    //
    // Set up the period for the SysTick timer.  The SysTick timer period is
    // set as a function of the system clock.
    SysTickPeriodSet(SysCtlClockGet() / SAMPLE_RATE_HZ);
    //
    // Register the interrupt handler
    SysTickIntRegister(SysTickIntHandler);
    //
    // Enable interrupt and device
    SysTickIntEnable();
    SysTickEnable();
}

void
initDisplay (void)
{
    // intialise the Orbit OLED display
    OLEDInitialise ();
}

//*****************************************************************************
//
// Function to display the mean ADC value (10-bit value, note) and sample count.
//
//*****************************************************************************
void
displayAltYaw(int16_t meanAlt, int16_t meanYaw, uint32_t count, int ref) // mode 0 is raw data, mode 1 is percentage, mode 2 is off
{
	char string[17];  // 16 characters across the display

    OLEDStringDraw ("ADC demo 2", 0, 0);
	
    // Form a new string for the line.  The maximum width specified for the
    //  number field ensures it is displayed right justified.
    int percentAlt = -((meanAlt - ref)/10.44); //hardcoded max, change later!
    usnprintf (string, sizeof(string), "Altitude = %4d%%...", percentAlt);
    // Update line on display.
    OLEDStringDraw (string, 0, 1);
    usnprintf (string, sizeof(string), "Yaw = %4d", meanYaw);
    OLEDStringDraw (string, 0, 2);
    usnprintf (string, sizeof(string), "Sample # %5d", count);
    OLEDStringDraw (string, 0, 3);
}


int
main(void)
{
	uint16_t i;
	int sum;
	int32_t ref;
	int32_t meanAlt;
	int32_t meanYaw;
	uint8_t leftButState;
	
	initClock ();
	initADC ();
	initDisplay ();
	initButtons ();
	initCircBuf (&g_altBuffer, BUF_SIZE_ALT);
	initCircBuf (&g_yawBuffer, BUF_SIZE_YAW);

    //
    // Enable interrupts to the processor.
    IntMasterEnable();

    SysCtlDelay (SysCtlClockGet()/3);  // 1s delay
    ref = getReferenceAltitude();

    SysCtlDelay (SysCtlClockGet() / 6);  // Update display at ~ 2 Hz


	while (1)
	{
	    updateButtons ();       // Poll the buttons
	    leftButState = checkButton (LEFT);
	    if (leftButState == PUSHED)
	    {
	        ref = getReferenceAltitude();
	    }
	    else
	    {

            //
            // Background task: calculate the (approximate) mean of the values in the
            // circular buffer and display it, together with the sample number.
            sum = 0;
            for (i = 0; i < BUF_SIZE_ALT; i++)
            {
                sum = sum + readCircBuf (&g_altBuffer);
            }
            // Calculate and display the rounded mean of the buffer contents
            meanAlt = ((((2 * sum + BUF_SIZE_ALT) / 2 / BUF_SIZE_ALT)));

            sum = 0;
            for (i = 0; i < BUF_SIZE_YAW; i++)
            {
                int current_value = readCircBuf (&g_yawBuffer);
                sum = sum + readCircBuf (&g_yawBuffer);
                printf("%d\n", current_value);
            }
            // Calculate and display the rounded mean of the buffer contents
            meanYaw = ((((2 * sum + BUF_SIZE_YAW) / 2 / BUF_SIZE_YAW)));

            displayAltYaw (meanAlt, meanYaw, g_ulSampCnt, ref);
	    }
        SysCtlDelay (SysCtlClockGet() / 150);  // Update display at ~ 50 Hz

	}
}


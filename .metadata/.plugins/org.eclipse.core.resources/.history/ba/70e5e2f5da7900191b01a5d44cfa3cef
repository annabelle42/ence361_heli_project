#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/adc.h"
#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/debug.h"
#include "utils/ustdlib.h"
#include "circBufT.h"
#include "OrbitOLED/OrbitOLEDInterface.h"
#include "buttons4.h"
#include "display.h"
#include "altitude.h"
#include "yaw.h"
#include "kernel.h"
#include "control.h"
#include "buttonInput.h"
#include "uart.h"
#include "pwmGen.h"
#include "adcControl.h"

#define CHECK_BUTTON_RATE 1
#define SAMPLE_ALTITUDE_RATE 1
#define SAMPLE_YAW_RATE 1
#define DISPLAY_RATE 1
#define CONTROL_RATE 1

int32_t meanAlt;

void runScheduler (void)
{

    int32_t meanYaw;
    //uint8_t leftButState;

    meanAlt = sampleAltitude ();
    meanAlt = -((meanAlt - altitudeRef)/10.44); //hardcoded max, CHANGE LATER!
    meanYaw = getYaw();

    if (meanAlt > 7 && takingoff)
    {
        takingoff = 0;
        flying = 1;
    }
    else if (meanAlt < 3 && landing)
    {
        landing = 0;
        landed = 1;
    }

    displayAltYaw (meanAlt, meanYaw);
    updateButtons();
    checkForAltitudeInput();
    checkForYawInput();
    int modeButton = checkForModeInput();
    flyingFSM(modeButton);
    char string[30];
    usnprintf (string, sizeof(string), "DY:%4d \r\n DA:%4d \r\n", desiredYaw, desiredAltitude);
    UARTSend(string);
    if (landed)
    {
        setPWM(200, 0);
        setPWMTail(200, 0);
    }
    else
    {
        controlAltitude();
        controlYaw();
    }
}

void initialiseEverything (void)
{
    desiredAltitude = 0;
    desiredYaw = 0;
    landing = 0;
    landed = 1;
    takingoff = 0;
    flying = 0;
    turningToReference = 1; // we want the helicopter to turn to the reference at first
    initClock ();
    initADC ();
    initDisplay ();
    initButtons ();
    // Enable interrupts to the processor.
    IntMasterEnable();
    initAltitude();
    initYaw();
    initPWM();
    initialiseUSB_UART();
    initializeTimer();
}

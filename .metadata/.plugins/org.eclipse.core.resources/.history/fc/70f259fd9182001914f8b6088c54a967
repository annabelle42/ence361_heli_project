/**********************************************************
//
// yaw.c - Yaw module for sampling and decoding yaw
// Created on 11/04/2019
//
// Authors: Annabelle Ritchie, Karan Naidu, Emily Tideswell
// Group 13, Thursday PM lab
// Contributions:  P.J. Bones   UCECE -- provided base code
**********************************************************/

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/adc.h"
#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/debug.h"
#include "utils/ustdlib.h"
#include "circBufT.h"
#include "OrbitOLED/OrbitOLEDInterface.h"
#include "buttons4.h"
#include "yaw.h"
#include "uart.h"

int phaseA, phaseB, prevPhaseA, prevPhaseB;
int yawDirGlobal = 0;
int referenceRotation;

int getYawDirGlobal(void)
{
    return yawDirGlobal;
}


//*****************************************************************************
//
// Initialises the GPIO pins and variables that are used to calculate the yaw.
//
//*****************************************************************************
void initYaw (void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);

    // set channels A and B to active high
    GPIOPadConfigSet(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD_WPD);
    GPIODirModeSet(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_DIR_MODE_IN);

    GPIOPadConfigSet(GPIO_PORTC_BASE, GPIO_PIN_4, GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD_WPD);
    GPIODirModeSet(GPIO_PORTC_BASE, GPIO_PIN_4, GPIO_DIR_MODE_IN);

    GPIOIntRegister(GPIO_PORTB_BASE, intHandlerYaw);
    GPIOIntTypeSet(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_BOTH_EDGES);
    // interrupts generated on both rising and falling edges

    GPIOIntRegister(GPIO_PORTC_BASE, intHandlerYawRef);
    GPIOIntTypeSet(GPIO_PORTC_BASE, GPIO_PIN_4, GPIO_BOTH_EDGES);

    GPIOIntEnable(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    GPIOIntEnable(GPIO_PORTC_BASE, GPIO_PIN_4);

    debugInitYaw();

    phaseA = 0;
    phaseB = 0;
    prevPhaseA = 0;
    prevPhaseB = 0;
}

void intHandlerYawRef (void)
{
    //char string[20];
    referenceRotation = GPIOPinRead(GPIO_PORTC_BASE, GPIO_PIN_4) & GPIO_PIN_4;
    if (referenceRotation == 16)
    {
        yawDirGlobal = 0;
    }
    GPIOIntClear(GPIO_PORTC_BASE, GPIO_PIN_4);
}

int getYawRef (void)
{
    return referenceRotation;
}

//*****************************************************************************
//
// Uses the pin changes from the pins connected to the quadrature decoder to
// calculate the yaw direction of the helicopter.
// Doesn't take in to account number of full rotations of the helicopter.
//
//*****************************************************************************
void intHandlerYaw (void)
{
    // we were using status formerly, but pin read is a much better way to handle the interrupts
    phaseA = GPIOPinRead(GPIO_PORTB_BASE, GPIO_PIN_0) & GPIO_PIN_0;
    phaseB = GPIOPinRead(GPIO_PORTB_BASE, GPIO_PIN_1) & GPIO_PIN_1;

    GPIOIntClear(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    yawFSM();
}

void yawFSM (void)
{
    int32_t yawDir = 0; // variable for yaw direction
    if (phaseB == 2) // phaseB is either 0 or 2 at this point, so we set it to 1 for consistency
        phaseB = 1;
    if (prevPhaseA == 0 && prevPhaseB == 0)
    {
        if ((phaseA == 0) && (phaseB == 1))
        {
            yawDir = 1;
        }
        else if ((phaseA == 1) && (phaseB == 0))
        {
            yawDir = -1;
        }
    }
    else if (prevPhaseA == 0 && prevPhaseB == 1)
    {
        if ((phaseA == 1) && (phaseB == 1))
        {
            yawDir = 1;
        }
        else if ((phaseA == 0) && (phaseB == 0))
        {
            yawDir = -1;
        }
    }
    else if (prevPhaseA == 1 && prevPhaseB == 1)
    {
        if ((phaseA == 1) && (phaseB == 0))
        {
            yawDir = 1;
        }
        else if ((phaseA == 0) && (phaseB == 1))
        {
            yawDir = -1;
        }
    }
    else if (prevPhaseA == 1 && prevPhaseB == 0)
    {
        if ((phaseA == 0) && (phaseB == 0))
        {
            yawDir = 1;
        }
        else if ((phaseA == 1) && (phaseB == 1))
        {
            yawDir = -1;
        }
    }
    yawDirGlobal += yawDir;
    // yawDir = -1 for counterclockwise, +1 for clockwise, 0 for no rotation (or an error)

    prevPhaseA = phaseA;
    prevPhaseB = phaseB;
}

//*****************************************************************************
//
// Returns the yaw direction of the helicopter relative to a reference.
//
//*****************************************************************************
int getYaw (void)
{
    // checks to wrap the yaw direction around
    if (yawDirGlobal > 481)
    {
        yawDirGlobal = 0;
    }
    else if (yawDirGlobal < 0)
    {
        yawDirGlobal = 479;
    }
    int returning = (int) yawDirGlobal * 0.75; // converts the direction from 0->481 to 0->359
    return returning - 179; // convert direction to -179 -> 180
}

/**********************************************************
//
// yaw.c - Yaw module for sampling and decoding yaw
// Created on 11/04/2019
//
// Authors: Annabelle Ritchie, Karan Naidu, Emily Tideswell
// Group 13, Thursday PM lab
// Contributions:  P.J. Bones   UCECE -- provided base code
**********************************************************/

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/adc.h"
#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/debug.h"
#include "utils/ustdlib.h"
#include "circBufT.h"
#include "OrbitOLED/OrbitOLEDInterface.h"
#include "buttons4.h"
#include "yaw.h"
#include "uart.h"

#define GREEN_LED GPIO_PIN_3

int phaseA, phaseB, prevPhaseA, prevPhaseB;
int yawDirGlobal = 0;
int referenceRotation;

int getYawDirGlobal(void)
{
    return yawDirGlobal;
}


//*****************************************************************************
//
// Initialises the GPIO pins and variables that are used to calculate the yaw.
//
//*****************************************************************************
void initYaw (void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);

    // set channels A and B to active high
    GPIOPadConfigSet(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD_WPD);
    GPIODirModeSet(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_DIR_MODE_IN);

    GPIOPadConfigSet(GPIO_PORTC_BASE, GPIO_PIN_4, GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD_WPD);
    GPIODirModeSet(GPIO_PORTC_BASE, GPIO_PIN_4, GPIO_DIR_MODE_IN);

    GPIOIntRegister(GPIO_PORTB_BASE, intHandlerYaw);
    GPIOIntTypeSet(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_BOTH_EDGES);
    // interrupts generated on both rising and falling edges

    GPIOIntRegister(GPIO_PORTC_BASE, intHandlerYawRef);
    GPIOIntTypeSet(GPIO_PORTC_BASE, GPIO_PIN_4, GPIO_BOTH_EDGES);

    GPIOIntEnable(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    GPIOIntEnable(GPIO_PORTC_BASE, GPIO_PIN_4);

    debugInitYaw();

    phaseA = 0;
    phaseB = 0;
    prevPhaseA = 0;
    prevPhaseB = 0;
}


//*****************************************************************************
//
// Used to debug the initYaw function.
//
//*****************************************************************************
void debugInitYaw(void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

    // Set up the specific port pin as medium strength current & pull-down config.
    // Refer to TivaWare peripheral lib user manual for set up for configuration options
    GPIOPadConfigSet(GPIO_PORTF_BASE, GREEN_LED, GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD_WPD);

    // Set data direction register as output
    GPIODirModeSet(GPIO_PORTF_BASE, GREEN_LED, GPIO_DIR_MODE_OUT);

    // Write a zero to the output pin 3 on port F
    GPIOPinWrite(GPIO_PORTF_BASE, GREEN_LED, 0x00);
}

void intHandlerYawRef (void)
{
    //referenceRotation = !GPIOPinRead(GPIO_PORTC_BASE, GPIO_PIN_4) & GPIO_PIN_4;
}


int getYawRef (void)
{
    return referenceRotation;
}
//*****************************************************************************
//
// Uses the pin changes from the pins connected to the quadrature decoder to
// calculate the yaw direction of the helicopter.
// Doesn't take in to account number of full rotations of the helicopter.
//
//*****************************************************************************
void intHandlerYaw (void)
{
    // we were using status formerly, but pin read is a much better way to handle the interrupts


    phaseA = GPIOPinRead(GPIO_PORTB_BASE, GPIO_PIN_0) & GPIO_PIN_0;
    phaseB = GPIOPinRead(GPIO_PORTB_BASE, GPIO_PIN_1) & GPIO_PIN_1;

    GPIOIntClear(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    yawFSM();
}

void yawFSM (void)
{
    int32_t yawDir = 0; // variable for yaw direction
    if (phaseB == 2)
        phaseB = 1;
    if (prevPhaseA == 0 && prevPhaseB == 0)
    {
        if ((phaseA == 0) && (phaseB == 1))
        {
            yawDir = 1;
        }
        else if ((phaseA == 1) && (phaseB == 0))
        {
            yawDir = -1;
        }
    }
    else if (prevPhaseA == 0 && prevPhaseB == 1)
    {
        if ((phaseA == 1) && (phaseB == 1))
        {
            yawDir = 1;
        }
        else if ((phaseA == 0) && (phaseB == 0))
        {
            yawDir = -1;
        }
    }
    else if (prevPhaseA == 1 && prevPhaseB == 1)
    {
        if ((phaseA == 1) && (phaseB == 0))
        {
            yawDir = 1;
        }
        else if ((phaseA == 0) && (phaseB == 1))
        {
            yawDir = -1;
        }
    }
    else if (prevPhaseA == 1 && prevPhaseB == 0)
    {
        if ((phaseA == 0) && (phaseB == 0))
        {
            yawDir = 1;
        }
        else if ((phaseA == 1) && (phaseB == 1))
        {
            yawDir = -1;
        }
    }
    yawDirGlobal += yawDir;
    // yawDir = -1 for counterclockwise, +1 for clockwise, 0 for no rotation (or an error)
    //char string[50];
    //usnprintf (string, sizeof(string), "A: %4d, B: %4d \r\n PA: %4d, PB: %4d \r\n", phaseA, phaseB, prevPhaseA, prevPhaseB);
    //UARTSend(string);

    prevPhaseA = phaseA;
    prevPhaseB = phaseB;
}

//*****************************************************************************
//
// Returns the yaw direction of the helicopter relative to a reference.
//
//*****************************************************************************
int getYaw (void)
{
    //yawDirGlobal = yawDirGlobal % 360;
    int returning = (int) yawDirGlobal * 0.75;
    // if we have rotated more than once, modulo needs to be taken
    return returning;
}
